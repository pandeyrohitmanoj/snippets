1.prime Numbers;
for(int i=1;i<sqrt(n);i++){
	if(n%i==0){
		return false
	}
}

2.fibonacci:
fib(n){
	if(n==1){
		return 1;
	}else{
		return n+fib(n-1);
	}
}
or
fib(n){
	int t1=0
	int t2=1
	cout << t1 << " " << t2
	for(int i=0;i<n-2;i++){
		int t3=t1+t2
		t1=t2;
		t2=t3
	}
}

factorial using dynamic programming:

int fact(int n){
    int length = arr.end()-arr.begin();
    if(n<=length){
        cout << arr[n-1] << "if" << endl; 
    }else{
        int value=0;
        int len = length!=0 ? length : 1;
        for(int i=len;i<=n;i++){
            arr.push_back(i*i);n
            //cout << i*i <<endl ;
        }
        cout << arr[n-1] << endl;
    }
}

pythagorean triplet:

int pythogoreanTriplet(int a , int b, int c){
    int max= a>b ? a>c ? a : c : b>c ? b : c;
    int hypotenuse= pow(max,2);
    int sum = pow(a,2) + pow(b,2) +pow(c,2) - hypotenuse;

    if(sum==hypotenuse){
        cout << "yes, " << a << ", "<< b<< ", " << c<< ", " <<  " are pythagorean triplet" <<endl;
        return 0;
    }
    cout << "Nope, they are not a pythagorean triplet" <<endl;
    return 0;
}


octalToDecimal :

int octTDecimal(string n){
    int curPower = n.length()-1;
    int sum=0;
    for(auto x:n){
        int value=atoi(&x);
        sum+=value*pow(8,curPower);
        curPower--;
    }
    cout << sum;
}



Inheritance Class:

class SuperHeroes{
    public:
        string work="Kick ass, take names";
        string reality="planet 618 Earth";
};

class Batman : public SuperHeroes{
    public: 
        string name="Batman";
        vector<string> values = {"Anonymity","Solidarity","Vengance","Peace"};
        vector<string> target = {"Joker","Penguin","Superman"};
        
};



int main() {
    Batman B;
    cout << "Our assignment is to go after the smartest man alive, i.e. " << B.name << " himself" << endl;
    cout << "Many of his enemys are most powerful and destructive people in the world like ";
    
    vector<string> enemyList = B.target;
    for(auto x : enemyList){
        cout << x << " ,";
    }
    cout << "but even they couldn't bring him down.\n";
    cout << "He follows his values too strictly and with great precision, and thats what we are gonna take advantage of him,";
    cout << "His values are:\n";
    vector<string> Values = B.values;
    for ( auto x : Values){
        cout << x <<"\n";
    }
    
    cout << "He belongs to the " << B.reality;
    
    return 0;
}




Print all the subsequences of string:

void print_subsequences(const std::string& str) {
    std::size_t n = str.size();
    for (size_t i = 0; i < (1 << n); ++i) {
        std::string sub;
        for (size_t j = 0; j < n; ++j) {
            if (i & (1 << j)) {
                sub += str[j];
            }
        }
        std::cout << sub << std::endl;
    }
}


print all the substring of string:

 for (int i = 0; i < str.length(); i++)
    {
        for (int j = 1; j <= str.length() - i; j++)
        {
            // Insert the substring into the set
            substrings.insert(str.substr(i, j));
        }
    }



Implementation of LinkedList:


struct Node{
    int data;
    Node* next;
};

class LinkedList{
    private:
        Node* head;
    public:
        LinkedList(){
            head=nullptr;
        }
        void prepend(int value){
            Node* new_node=new Node;
            new_node->data=value;
            new_node->next=head;
            head=new_node;
        }
        void append(int value){
            Node* new_node= new Node;
            new_node->data=value;
            new_node->next=nullptr;
            if(head==nullptr){
                head=new_node;
                return;
            }
            Node* last=head;
            while(last->next!=nullptr){
                last=last->next;
            }
            last->next=new_node;
        }
        void print(){
            Node* start=head;
            while(start!=nullptr){
                cout << start->data << endl;
                start=start->next;
            }
        }
        void delete_node(int value){
            Node* current=head;
            Node* previous=nullptr;
            if(current!=nullptr && current->data==value){
                head=current->next;
                delete current;
                return;
            }
            while(current!=nullptr && current->data!=value){
                previous=current;
                current=current->next;
            }
            if(current!=nullptr){
                previous->next=current->next;
                delete current;
                return;
            }
        }
};





maps:

#include<map>

map<int,int> firstMap;


//Insertion
map.insert(make_pair<int,int>(2,3));
map[2]=3


//Accessing Element:
value=map[key]


//search
map.counts(value)>0
auto it=map.find(value)
if(it!=map.end())

//erase element
map.erase(key)



// Iterate over the elements
for (auto it = map.begin(); it != map.end(); ++it) {
  std::cout << it->first << ": " << it->second << std::endl;
}



Hexadecimal to integer:

int hex_to_int(const std::string& hex_string) {
  int value = 0;
  for (char c : hex_string) {
    int digit;
    if (c >= '0' && c <= '9') {
      digit = c - '0';
    } else if (c >= 'a' && c <= 'f') {
      digit = 10 + (c - 'a');
    } else if (c >= 'A' && c <= 'F') {
      digit = 10 + (c - 'A');
    } else {
      // Invalid hex digit
      return 0;
    }
    value = (value * 16) + digit;
  }
  return value;
}





Binary search tree:


#include <iostream>

struct Node {
  int value;
  Node *left;
  Node *right;
};

class BST {
 public:
  BST() : root_(nullptr) {}

  void Insert(int value) {
    if (root_ == nullptr) {
      root_ = new Node{value, nullptr, nullptr};
      return;
    }

    Node *current = root_;
    while (true) {
      if (value < current->value) {
        if (current->left == nullptr) {
          current->left = new Node{value, nullptr, nullptr};
          return;
        }
        current = current->left;
      } else {
        if (current->right == nullptr) {
          current->right = new Node{value, nullptr, nullptr};
          return;
        }
        current = current->right;
      }
    }
  }

  bool Search(int value) {
    Node *current = root_;
    while (current != nullptr) {
      if (value == current->value) {
        return true;
      } else if (value < current->value) {
        current = current->left;
      } else {
        current = current->right;
      }
    }
    return false;
  }

 private:
  Node *root_;
};

int main() {
  BST bst;

  bst.Insert(5);
  bst.Insert(3);
  bst.Insert(7);
  bst.Insert(2);
  bst.Insert(4);
  bst.Insert(6);
  bst.Insert(8);

  std::cout << bst.Search(5) << std::endl;  // prints 1 (true)
  std::cout << bst.Search(10) << std::endl;  // prints 0 (false)

  return 0;
}


Find a square root:

int mySqrt(int x) {
        if(x==0) return 0;
        long double guess =1 ;
        long double error= x - guess*guess; 
        while(error*100 > 1  && guess>0 && error>0){
            guess=(guess+x/guess)/2;
            error=fabs(x-guess*guess);            
        }
        return floor(guess);
    }

Create a pascal trinagle

void getRow(int rowIndex) {
        vector<vector<int>> pascalTriangle = {{1},{1,1}};
        for(size_t rows=2; rows <= rowIndex ; rows++){
            vector<int> currentRow;
            currentRow.push_back(1);
            for(size_t cols=1; cols < rows ; cols++ ){
                currentRow.push_back(pascalTriangle[rows-1][cols]+pascalTriangle[rows-1][cols-1]);
            }
            currentRow.push_back(1);
            pascalTriangle.push_back(currentRow);
        }
    }






Tree traversal using iteration:

void preOrder(TreeNode* root) {
    stack<TreeNode*> s;
    s.push(root);
    while (!s.empty()) {
        TreeNode* curr = s.top();
        s.pop();
        cout << curr->val << " ";
        if (curr->right) {
            s.push(curr->right);
        }
        if (curr->left) {
            s.push(curr->left);
        }
    }
}



void inOrder(TreeNode* root) {
    stack<TreeNode*> s;
    TreeNode* curr = root;
    while (curr || !s.empty()) {
        while (curr) {
            s.push(curr);
            curr = curr->left;
        }
        curr = s.top();
        s.pop();
        cout << curr->val << " ";
        curr = curr->right;
    }
}


void postOrder(TreeNode* root) {
    stack<TreeNode*> s1, s2;
    s1.push(root);
    while (!s1.empty()) {
        TreeNode* curr = s1.top();
        s1.pop();
        s2.push(curr);
        if (curr->left) {
            s1.push(curr->left);
        }
        if (curr->right) {
            s1.push(curr->right);
        }
    }
    while (!s2.empty()) {
        cout << s2.top()->val << " ";
        s2.pop();
    }
}


void BFS_iter(int graph[][V], int start) {
    queue<int> q;
    bool visited[V] = {false};

    q.push(start);
    visited[start] = true;

    while (!q.empty()) {
        int u = q.front();
        cout << u << " ";
        q.pop();

        for (int i = 0; i < V; i++) {
            if (graph[u][i] && !visited[i]) {
                q.push(i);
                visited[i] = true;
            }
        }
    }
}

void DFS_iter(int graph[][V], int start) {
    stack<int> s;
    bool visited[V] = {false};

    s.push(start);
    visited[start] = true;

    while (!s.empty()) {
        int v = s.top();
        s.pop();
        cout << v << " ";

        for (int i = 0; i < V; i++) {
            if (graph[v][i] && !visited[i]) {
                s.push(i);
                visited[i] = true;
            }
        }
    }
}

int main() {
    int graph[V][V] = {{0, 1, 1, 0},
                       {1, 0, 0, 1},
                       {1, 0, 0, 1},
                       {0, 1, 1, 0}};

    BFS_iter(graph, 0);

    return 0;
}
This code creates a simple graph with 4 vertices, represented by an adjacency matrix graph[][].


