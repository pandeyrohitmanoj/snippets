
Interview questions:

1. Both call() and apply()  are methods that allows you to call a function and explicitly set the values of `this` witthin the function,

2. Differnce is how arguments are passed to the function one call uses parameters to pass, adn apply uses an object and array of parameters in order

3. bind is used to provide a reusable functions for any number of object to use accross the code. once bind is a[[;ied it cannot be removed andthus bind chaining is impossible

4. 'this' keyword never points to the function and so in doing it refers to the global variablesx

promise.all([firstPromise(), secondPromise()]).then( (res) => { clg(res) } ).catch(err => {clg(err)})		
//this takes all the promises functions and send out all the response at once, IF ANY ONE OF THE PROMISE FAILS THEN THE ALL THE PROMISES FAILS

promise.race([firstPromise(), secondPromise()]).then( (res) => { clg(res) } ).catch(err => {clg(err)})	
this takes all the promises functions and send out the fastest response as soon as it is ready

Promise.allSettled([shareVideo("share"),likeVideo("like"),subscribeVideo("subscribe")]) .then().catch()
It sends out result of all the promise regardless of anyone gets failed

Promise.any()
It will sen out any first resolved promise i.e. it check if first failed then second and so on till it gets any one resolved








let foo=1 //is an number
foo='bar' //foo is a new string
foo=true //foo is boolean


foo=4+'1' //foo becomes a string

TypeScript:

let name: string
let phoneNo: number
let isValid: boolean
let arrOfPhoneNo: number[]


function getOneNo<T>(arr: T[]) {    
    return arr[1]
}

console.log(getOneNo<string>(names))

const getOneNo = <T>( arr: T[] ): T =>{
    return arr[3]
}

console.log(getOneNo(names))




interface Animal {
    name: string,
    age: number,
    moments: string[],
    location: string
}

class Dog implements Animal{
    name: string
    age: number
    moments: string[]
    location: string

    constructor( name:string, age:number, moments: string[], location: string) {
        this.name = name
        this.age = age
        this.moments = moments
        this.location = location
    }
    public displayInfo() :void {
        console.log(`Name of dog: ${this.name} \n Age of Dog: ${this.age} \n Memorable Moments of dog:: ${this.moments} ] \n Current Position of dog: ${this.location}`)
    }
}

const lassy = new Dog( "lassy",3, ["founded 4th may","ran a race"], 'Bournville')
lassy.displayInfo()






let foo //foo is undefined

*To check if integer is in safe integer limit method is:Number.isSafeInteger()4

*To sort odd and even numbers seperately in ascending order
b.sort((a,b)=> a%2 ? b%2 ? a-b : -1 : b%2 ? 1 : a-b )

*To convert array of string to object in js
const arr = ['zero', 'one', 'two'];
const obj1 = Object.assign({}, arr);
console.log(obj1); // 👉️ {0: 'zero', 1: 'one', 2: 'two'}

class quadrilateral{
    constructor(height,width){
        this.height=height;
        this.width=width;
    }
    get checkarea(){
        return this.area()
    }
    area(){
        return this.height*this.width
    }

}

let trapezium= new quadrilateral(6,8)
let square=new quadrilateral(8,8)
console.log(square.checkarea)



Getting Input in js:

var readline = require('readline')

const r1 = readline.Interface({
    input: process.stdin,
    output: process.stdout
})

r1.on( 'line', line => {
    console.log(line)
})



array: can be used as stack, queue, linked list, 
array.push(value)
array.pop()	
array.indexOf(value)
array.forEach(()=>{}) //doesn't create any array
array.map(()=>{return value} ) //creates array of same size
array.filter(()=>{return booleanValue}) //creates array with equal or lesser values based on condition and boolean response
array = array1.find(element => element > 10);  /returns index of first element which satisfies the condition
array.shift() //returns first element of array by removing it from array
array.unshift(values) //adds element from start
array.splice(pos,n,values to be inserted)  //removes n elements from array
array.splice(5,0,2,3,4) //adds 2,3,4 at 5th position. Add element at specific position in js
array.slice(start,end)  //creates a subarray with selected numbers of element, from start to between end number of elements ahead



string:
str.length
let charachter=str.charAt(index)
let character= str.indexOf(values)
let charArray= str.split('')
let newtext=str.slice(start,end)			//slice() extracts a part of a string and returns the extracted part in a new string
let newtext=str.substring(start, end)
let newtext=str.substr(start, length)
let newtext=str.replace(substring,replaceme	nt) 	//The replace() method replaces only the first match and  	does not change the string it is called on.
let newtext=str.toUpperCase()
let newtext=str.toLowerCase()
let newtext=str.trim()  				//remove all the whitespace from both the side of string
strArr = strArr.reduce( (a, v) => ( {...a,[v]:v} ), {} ) 			//convert arr to object with



To replace case insensitive, use a regular expression with an /i flag (insensitive) and to repace all /g
let text = "Please visit Microsoft!";
let newText = text.replace(/MICROSOFT/i, "W3Schools");


Object: can be used as sets,hashmap
for(let element in object1){
	let values=Object1[element]
}
Object.values(objectNames)	//returns array of values
Object.keys(ObjectNames)	//returns array of keys

ObjectName[key]=value
ObjectName.key=value

delete ObjectName[key]
delete ObjectName.keys

array to object:
array.reduce(function(total, currentValue, currentIndex, arr), initialValue) 	//if we have to create a operation with every single element in the array
 

exit Fullscreen:

if (document.exitFullscreen) {
  document.exitFullscreen();
} else if (document.webkitExitFullscreen) {
  document.webkitExitFullscreen();
} else if (document.msExitFullscreen) {
  document.msExitFullscreen();
}

fullscreen:

const elem = document.documentElement; // Get the root element of the document

if (elem.requestFullscreen) { // Check if the Fullscreen API is supported
  elem.requestFullscreen(); // Request fullscreen
} else if (elem.webkitRequestFullscreen) { // Safari and older versions of Chrome
  elem.webkitRequestFullscreen();
} else if (elem.msRequestFullscreen) { // Internet Explorer and Edge
  elem.msRequestFullscreen();
}




All AI platforms:

holoscan
cv-cuda
nvidia dgx cloud for companies only
nvidia nemo
nvidia bionNEmo service




